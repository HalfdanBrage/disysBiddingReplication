// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: grpc/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Bidding_ConnectToReplicator_FullMethodName = "/bidding.Bidding/ConnectToReplicator"
	Bidding_Bid_FullMethodName                 = "/bidding.Bidding/Bid"
	Bidding_Result_FullMethodName              = "/bidding.Bidding/Result"
)

// BiddingClient is the client API for Bidding service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BiddingClient interface {
	ConnectToReplicator(ctx context.Context, in *Void, opts ...grpc.CallOption) (Bidding_ConnectToReplicatorClient, error)
	Bid(ctx context.Context, in *Amount, opts ...grpc.CallOption) (*BidAck, error)
	Result(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Outcome, error)
}

type biddingClient struct {
	cc grpc.ClientConnInterface
}

func NewBiddingClient(cc grpc.ClientConnInterface) BiddingClient {
	return &biddingClient{cc}
}

func (c *biddingClient) ConnectToReplicator(ctx context.Context, in *Void, opts ...grpc.CallOption) (Bidding_ConnectToReplicatorClient, error) {
	stream, err := c.cc.NewStream(ctx, &Bidding_ServiceDesc.Streams[0], Bidding_ConnectToReplicator_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &biddingConnectToReplicatorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bidding_ConnectToReplicatorClient interface {
	Recv() (*ReplicatorUpdate, error)
	grpc.ClientStream
}

type biddingConnectToReplicatorClient struct {
	grpc.ClientStream
}

func (x *biddingConnectToReplicatorClient) Recv() (*ReplicatorUpdate, error) {
	m := new(ReplicatorUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *biddingClient) Bid(ctx context.Context, in *Amount, opts ...grpc.CallOption) (*BidAck, error) {
	out := new(BidAck)
	err := c.cc.Invoke(ctx, Bidding_Bid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *biddingClient) Result(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Outcome, error) {
	out := new(Outcome)
	err := c.cc.Invoke(ctx, Bidding_Result_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BiddingServer is the server API for Bidding service.
// All implementations must embed UnimplementedBiddingServer
// for forward compatibility
type BiddingServer interface {
	ConnectToReplicator(*Void, Bidding_ConnectToReplicatorServer) error
	Bid(context.Context, *Amount) (*BidAck, error)
	Result(context.Context, *Void) (*Outcome, error)
	mustEmbedUnimplementedBiddingServer()
}

// UnimplementedBiddingServer must be embedded to have forward compatible implementations.
type UnimplementedBiddingServer struct {
}

func (UnimplementedBiddingServer) ConnectToReplicator(*Void, Bidding_ConnectToReplicatorServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectToReplicator not implemented")
}
func (UnimplementedBiddingServer) Bid(context.Context, *Amount) (*BidAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bid not implemented")
}
func (UnimplementedBiddingServer) Result(context.Context, *Void) (*Outcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Result not implemented")
}
func (UnimplementedBiddingServer) mustEmbedUnimplementedBiddingServer() {}

// UnsafeBiddingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BiddingServer will
// result in compilation errors.
type UnsafeBiddingServer interface {
	mustEmbedUnimplementedBiddingServer()
}

func RegisterBiddingServer(s grpc.ServiceRegistrar, srv BiddingServer) {
	s.RegisterService(&Bidding_ServiceDesc, srv)
}

func _Bidding_ConnectToReplicator_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BiddingServer).ConnectToReplicator(m, &biddingConnectToReplicatorServer{stream})
}

type Bidding_ConnectToReplicatorServer interface {
	Send(*ReplicatorUpdate) error
	grpc.ServerStream
}

type biddingConnectToReplicatorServer struct {
	grpc.ServerStream
}

func (x *biddingConnectToReplicatorServer) Send(m *ReplicatorUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _Bidding_Bid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Amount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiddingServer).Bid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bidding_Bid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiddingServer).Bid(ctx, req.(*Amount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bidding_Result_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BiddingServer).Result(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bidding_Result_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BiddingServer).Result(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

// Bidding_ServiceDesc is the grpc.ServiceDesc for Bidding service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bidding_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bidding.Bidding",
	HandlerType: (*BiddingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Bid",
			Handler:    _Bidding_Bid_Handler,
		},
		{
			MethodName: "Result",
			Handler:    _Bidding_Result_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectToReplicator",
			Handler:       _Bidding_ConnectToReplicator_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/proto.proto",
}

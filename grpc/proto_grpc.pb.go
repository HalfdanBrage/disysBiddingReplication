// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: grpc/proto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BiddingClient is the client API for Bidding service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BiddingClient interface {
	ConnectToReplicator(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (Bidding_ConnectToReplicatorClient, error)
}

type biddingClient struct {
	cc grpc.ClientConnInterface
}

func NewBiddingClient(cc grpc.ClientConnInterface) BiddingClient {
	return &biddingClient{cc}
}

func (c *biddingClient) ConnectToReplicator(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (Bidding_ConnectToReplicatorClient, error) {
	stream, err := c.cc.NewStream(ctx, &Bidding_ServiceDesc.Streams[0], "/bidding.Bidding/ConnectToReplicator", opts...)
	if err != nil {
		return nil, err
	}
	x := &biddingConnectToReplicatorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bidding_ConnectToReplicatorClient interface {
	Recv() (*ReplicatorUpdate, error)
	grpc.ClientStream
}

type biddingConnectToReplicatorClient struct {
	grpc.ClientStream
}

func (x *biddingConnectToReplicatorClient) Recv() (*ReplicatorUpdate, error) {
	m := new(ReplicatorUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BiddingServer is the server API for Bidding service.
// All implementations must embed UnimplementedBiddingServer
// for forward compatibility
type BiddingServer interface {
	ConnectToReplicator(*ConnectRequest, Bidding_ConnectToReplicatorServer) error
	mustEmbedUnimplementedBiddingServer()
}

// UnimplementedBiddingServer must be embedded to have forward compatible implementations.
type UnimplementedBiddingServer struct {
}

func (UnimplementedBiddingServer) ConnectToReplicator(*ConnectRequest, Bidding_ConnectToReplicatorServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectToReplicator not implemented")
}
func (UnimplementedBiddingServer) mustEmbedUnimplementedBiddingServer() {}

// UnsafeBiddingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BiddingServer will
// result in compilation errors.
type UnsafeBiddingServer interface {
	mustEmbedUnimplementedBiddingServer()
}

func RegisterBiddingServer(s grpc.ServiceRegistrar, srv BiddingServer) {
	s.RegisterService(&Bidding_ServiceDesc, srv)
}

func _Bidding_ConnectToReplicator_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BiddingServer).ConnectToReplicator(m, &biddingConnectToReplicatorServer{stream})
}

type Bidding_ConnectToReplicatorServer interface {
	Send(*ReplicatorUpdate) error
	grpc.ServerStream
}

type biddingConnectToReplicatorServer struct {
	grpc.ServerStream
}

func (x *biddingConnectToReplicatorServer) Send(m *ReplicatorUpdate) error {
	return x.ServerStream.SendMsg(m)
}

// Bidding_ServiceDesc is the grpc.ServiceDesc for Bidding service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bidding_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bidding.Bidding",
	HandlerType: (*BiddingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectToReplicator",
			Handler:       _Bidding_ConnectToReplicator_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/proto.proto",
}
